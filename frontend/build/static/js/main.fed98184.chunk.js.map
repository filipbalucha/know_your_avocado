{"version":3,"sources":["avocado.PNG","components/Buttons.js","components/Result.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["TakePictureButton","props","inputEl","useRef","Fragment","hidden","ref","type","accept","capture","onChange","onClick","Button","primary","current","click","UploadImageButton","Result","loading","response","Loader","active","fruit_visible","result","summary","Header","as","to_percentage","val","toFixed","probabilities","map","probability","ripeness","category","replace","data","labels","categories","datasets","backgroundColor","borderWidth","label","Grid","textAlign","Row","Popup","content","header","trigger","year","Date","getFullYear","Footer","Segment","inverted","vertical","style","padding","width","bottom","flex","Container","divided","stackable","Column","List","horizontal","verticalAlign","Item","href","Icon","name","App","useState","uploadedImage","setUploadedImage","status","setStatus","setResponse","useEffect","handleImageUploaded","event","preventDefault","image","target","files","basic","padded","display","minHeight","flexDirection","Image","centered","src","avocado","size","placeholder","columns","Divider","icon","celled","Transition","visible","animation","duration","rounded","URL","createObjectURL","disabled","FormData","append","fetch","method","body","then","res","json","setTimeout","console","log","catch","err","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fed98184.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avocado.9fb67f28.PNG\";","import React, { useRef } from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nexport const TakePictureButton = (props) => {\n  const inputEl = useRef(null);\n  return (\n    <React.Fragment>\n      <input\n        hidden\n        ref={inputEl}\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"environment\"\n        onChange={props.onClick}\n      />\n      <Button primary onClick={() => inputEl.current.click()}>\n        Take a picture\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport const UploadImageButton = (props) => {\n  const inputEl = useRef(null);\n  return (\n    <React.Fragment>\n      <input\n        hidden\n        ref={inputEl}\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={props.onClick}\n      />\n      <Button primary onClick={() => inputEl.current.click()}>\n        Upload an image\n      </Button>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { Grid, Loader, Header, Popup } from \"semantic-ui-react\";\n\nconst NUM_DP = 2;\nexport const Result = (props) => {\n  const { loading, response } = props;\n  if (loading) {\n    return <Loader active>Loading</Loader>;\n  }\n  const { fruit_visible, result, summary } = response;\n  if (!fruit_visible) {\n    return (\n      <React.Fragment>\n        <Header as=\"h3\">Sorry, I was unable to spot any ðŸ¥‘</Header>\n        <p>Could you try retaking the photo?</p>\n      </React.Fragment>\n    );\n  }\n  // Create graph\n  const to_percentage = (val) => (val * 100).toFixed(NUM_DP);\n  const probabilities = summary.probabilities.map(to_percentage);\n  const probability = to_percentage(result.probability);\n  const ripeness = result.category.replace(\"avocado_\", \"\");\n  const data = {\n    labels: summary.categories,\n    datasets: [\n      {\n        backgroundColor: [\"#d9a26f\", \"#b5ba6a\"],\n        borderWidth: 1,\n        label: \"TBA\",\n        data: probabilities,\n      },\n    ],\n  };\n  return (\n    <Grid textAlign=\"center\">\n      <Grid.Row>\n        <Popup\n          content={\n            \"The percentage indicates to what extent the 'AI' is certain about its prediction. It does not quantify the ripeness of the ðŸ¥‘ as such.\"\n          }\n          header={\"What does this mean?\"}\n          trigger={\n            <Header as=\"h3\">\n              This ðŸ¥‘ is <b>{ripeness}</b> with a {probability}% probability!\n            </Header>\n          }\n        />\n      </Grid.Row>\n      <Grid.Row>\n        <Doughnut data={data} />\n      </Grid.Row>\n    </Grid>\n  );\n};\n","import {\n  Segment,\n  Container,\n  Icon,\n  Grid,\n  Header,\n  List,\n} from \"semantic-ui-react\";\n\nconst URL_LINKEDIN = \"https://www.linkedin.com/in/filip-balucha/\";\nconst URL_GITHUB = \"https://github.com/filipbalucha\";\nconst URL_FACEBOOK = \"https://www.facebook.com/filiposlav\";\nconst EMAIL = \"balucha.filip2@gmail.com\";\nconst model = \"ResNet-18 CNN\";\nvar year = new Date().getFullYear();\n\nexport const Footer = (props) => {\n  return (\n    <Segment\n      inverted\n      vertical\n      style={{\n        padding: \"1.5em 0em\",\n        width: \"100%\",\n        bottom: 0,\n        flex: 1,\n      }}\n    >\n      <Container>\n        <Grid divided inverted stackable>\n          <Grid.Row>\n            <Grid.Column width={3}>\n              <Header inverted as=\"h4\" content=\"Author\" />\n              <p>Filip Balucha &copy;{year}</p>\n            </Grid.Column>\n            <Grid.Column width={10}>\n              <Header as=\"h4\" inverted>\n                Why?\n              </Header>\n              <p>\n                I struggle to tell ripe avocados from unripe ones, so I trained\n                a deep learning model based on the {model} to help me with the\n                task. Hope it can help you too ðŸ˜Š. Get in touch if you have any\n                requests or suggestions.\n              </p>\n            </Grid.Column>\n            <Grid.Column width={3}>\n              <Header as=\"h4\" inverted>\n                Contact\n              </Header>\n              <List horizontal inverted verticalAlign=\"middle\">\n                <List.Item href={URL_LINKEDIN}>\n                  <Icon name=\"linkedin\" />\n                </List.Item>\n                <List.Item href={URL_GITHUB}>\n                  <Icon name=\"github\" />\n                </List.Item>\n                <List.Item href={URL_FACEBOOK}>\n                  <Icon name=\"facebook\" />\n                </List.Item>\n                <List.Item href={`mailto: ${EMAIL}`}>\n                  <Icon name=\"mail\" />\n                </List.Item>\n              </List>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </Segment>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Segment,\n  Transition,\n} from \"semantic-ui-react\";\nimport avocado from \"./avocado.PNG\";\nimport { TakePictureButton, UploadImageButton } from \"./components/Buttons\";\nimport { Result } from \"./components/Result\";\nimport { Footer } from \"./components/Footer\";\n\nfunction App() {\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [status, setStatus] = useState(\"AWAIT\");\n  const [response, setResponse] = useState();\n\n  useEffect(() => {\n    setStatus(\"AWAIT\");\n  }, [uploadedImage]);\n\n  const handleImageUploaded = (event) => {\n    event.preventDefault();\n    const image = event.target.files[0];\n    setUploadedImage(image);\n  };\n\n  const handlePredictPressed = () => {\n    const data = new FormData();\n    data.append(\"file\", uploadedImage);\n    setStatus(\"LOADING\");\n    fetch(\"/predict\", {\n      method: \"POST\",\n      body: data,\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setTimeout(() => {\n          setResponse(data);\n          setStatus(\"FINISHED\");\n          console.log(data);\n        }, 500); // TODO: simulate request timeout\n      })\n      .catch((err) => console.error(err));\n  };\n\n  return (\n    <React.Fragment>\n      <Segment\n        basic\n        padded=\"very\"\n        textAlign=\"center\"\n        style={{ display: \"flex\", minHeight: \"100vh\", flexDirection: \"column\" }}\n      >\n        <Image centered src={avocado} size=\"small\" />\n        <Header as=\"h1\">Know your avocado!</Header>\n        <Header as=\"h3\">Say no to unripe avocados.</Header>\n        <Segment placeholder>\n          <Grid columns={2} textAlign=\"center\">\n            <Divider vertical>Or</Divider>\n            <Grid.Row verticalAlign=\"middle\">\n              <Grid.Column>\n                <Header icon>\n                  <Icon name=\"photo\" />\n                </Header>\n                <TakePictureButton onClick={handleImageUploaded} />\n              </Grid.Column>\n              <Grid.Column>\n                <Header icon>\n                  <Icon name=\"images\" />\n                </Header>\n                <UploadImageButton onClick={handleImageUploaded} />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n        {uploadedImage && (\n          <Segment placeholder>\n            <Grid stackable columns={2} celled=\"internally\" textAlign=\"center\">\n              <Grid.Row verticalAlign=\"middle\">\n                <Grid.Column>\n                  <Transition\n                    visible={uploadedImage}\n                    animation=\"fade\"\n                    duration={500}\n                  >\n                    <Image\n                      centered\n                      rounded\n                      src={uploadedImage && URL.createObjectURL(uploadedImage)}\n                      size=\"medium\"\n                      verticalAlign=\"middle\"\n                    />\n                  </Transition>\n                  <Divider horizontal />\n                  {status === \"AWAIT\" && (\n                    <Button\n                      disabled={!uploadedImage}\n                      onClick={handlePredictPressed}\n                    >\n                      Predict\n                    </Button>\n                  )}\n                </Grid.Column>\n                {status !== \"AWAIT\" && (\n                  <Grid.Column>\n                    <Result\n                      loading={status === \"LOADING\"}\n                      response={response}\n                    />\n                  </Grid.Column>\n                )}\n              </Grid.Row>\n            </Grid>\n          </Segment>\n        )}\n      </Segment>\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}